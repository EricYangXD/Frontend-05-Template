<!--
 * @Author: Eric YangXinde
 * @Date: 2020-11-08 14:52:37
 * @LastModifiedBy: Eric YangXinde
 * @LastEditTime: 2020-11-08 15:34:48
 * @Description: 
-->
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width,maximum-scale=1,minimum-scale=1,initial-scale=1,user-scalable=no"
		/>
		<title>Dragable</title>
	</head>
	<body>
		<div id="container">
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
			文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
		</div>
		<div
			id="dragable"
			style="
				display: inline-block;
				width: 100px;
				height: 100px;
				background-color: blueviolet;
			"
		></div>
		<script>
			let dragable = document.getElementById("dragable");
			let baseX = 0,
				baseY = 0;
			dragable.addEventListener("mousedown", (event) => {
				let startX = event.clientX,
					startY = event.clientY;
				let up = (event) => {
					baseX = baseX + event.clientX - startX;
					baseY = baseY + event.clientY - startY;
					document.removeEventListener("mousemove", move);
					document.removeEventListener("mouseup", up);
				};
				let move = (event) => {
					// dragable.style.transform = `translate(${
					// baseX + event.clientX - startX
					// }px,${baseY + event.clientY - startY}px)`;

					let range = getNearest(event.clientX, event.clientY);
					range.insertNode(dragable); //insert操作默认会自动把以前的dom移除掉
				};
				document.addEventListener("mousemove", move);
				document.addEventListener("mouseup", up);
			});

			let ranges = [];
			let container = document.getElementById("container");

			for (
				let i = 0;
				i < container.childNodes[0].textContent.length;
				i++
			) {
				let range = document.createRange();
				range.setStart(container.childNodes[0], i);
				range.setEnd(container.childNodes[0], i);

				console.log(range.getBoundingClientRect());
				ranges.push(range);
			}

			function getNearest(x, y) {
				let min = Infinity;
				let nearest = null;

				for (let range of ranges) {
					let rect = range.getBoundingClientRect();
					let distance = (rect.x - x) ** 2 + (rect.y - y) ** 2;
					if (distance < min) {
						nearest = range;
						min = distance;
					}
				}
				return nearest;
			}

			document.addEventListener("selectstart", (event) =>
				event.preventDefault()
			);
		</script>
	</body>
</html>
